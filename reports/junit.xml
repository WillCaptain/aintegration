<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="30" time="229.851" timestamp="2025-10-15T08:23:58.503765" hostname="imacdeMacBook-Air.local"><testcase classname="tests.test_bl000_plan_module" name="test_create_plan_from_config" time="0.009" /><testcase classname="tests.test_bl000_plan_module" name="test_plan_instance_creation_and_task_management" time="0.006" /><testcase classname="tests.test_bl000_plan_module" name="test_plan_instance_self_driven_execution" time="1.108" /><testcase classname="tests.test_bl000_plan_module" name="test_task_instance_status_trace" time="0.111" /><testcase classname="tests.test_bl000_plan_module" name="test_plan_instance_without_listeners" time="0.612" /><testcase classname="tests.test_bl000_plan_module" name="test_plan_lifecycle_management" time="0.111" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_create_plan_from_config_file" time="0.017" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_create_plan_from_template" time="0.009" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_create_plan_via_api" time="0.008" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_plan_metadata_management" time="0.008" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_create_plan_error_handling" time="0.019" /><testcase classname="tests.test_bl001_new_plan.TestBL001NewPlan" name="test_create_plan_edge_cases" time="0.009" /><testcase classname="tests.test_bl002_update_plan.TestBL002UpdatePlan" name="test_update_plan_with_versioning" time="0.006" /><testcase classname="tests.test_bl002_update_plan.TestBL002UpdatePlan" name="test_rollback_to_previous_version" time="0.006" /><testcase classname="tests.test_bl002_update_plan.TestBL002UpdatePlan" name="test_version_conflict_protection" time="0.006" /><testcase classname="tests.test_bl003_delete_plan.TestBL003DeletePlan" name="test_soft_delete_plan" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_by_name" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_by_tags" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_by_status" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_by_time_range" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_full_text" time="0.005" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_pagination" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_sorting" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_combined_filters" time="0.006" /><testcase classname="tests.test_bl004_query_plan.TestBL004QueryPlan" name="test_search_plans_empty_result" time="0.006" /><testcase classname="tests.test_bl005_plan_execution_onboarding.TestBL005PlanExecutionOnboarding" name="test_onboarding_plan_creation_and_validation" time="0.006" /><testcase classname="tests.test_bl005_plan_execution_onboarding.TestBL005PlanExecutionOnboarding" name="test_listener_chain_execution_sequence" time="71.201"><failure message="AssertionError: Expected plan instance status 'done', got 'error'&#10;assert 'error' == 'done'&#10;  - done&#10;  + error">tests/test_bl005_plan_execution_onboarding.py:266: in test_listener_chain_execution_sequence
    assert plan_final_status == "done", f"Expected plan instance status 'done', got '{plan_final_status}'"
E   AssertionError: Expected plan instance status 'done', got 'error'
E   assert 'error' == 'done'
E     - done
E     + error</failure></testcase><testcase classname="tests.test_bl005_plan_execution_onboarding.TestBL005PlanExecutionOnboarding" name="test_planner_triggered_on_main_done" time="10.057"><failure message="AssertionError: Mock API log file not found: tests/.artifacts/mock_tool_result.log&#10;assert False&#10; +  where False = &lt;function exists at 0x10227b2e0&gt;('tests/.artifacts/mock_tool_result.log')&#10; +    where &lt;function exists at 0x10227b2e0&gt; = &lt;module 'posixpath' (frozen)&gt;.exists&#10; +      where &lt;module 'posixpath' (frozen)&gt; = os.path">tests/test_bl005_plan_execution_onboarding.py:659: in test_planner_triggered_on_main_done
    await self._verify_planner_queries_in_log()
tests/test_bl005_plan_execution_onboarding.py:495: in _verify_planner_queries_in_log
    assert os.path.exists(MOCK_LOG_FILE), f"Mock API log file not found: {MOCK_LOG_FILE}"
E   AssertionError: Mock API log file not found: tests/.artifacts/mock_tool_result.log
E   assert False
E    +  where False = &lt;function exists at 0x10227b2e0&gt;('tests/.artifacts/mock_tool_result.log')
E    +    where &lt;function exists at 0x10227b2e0&gt; = &lt;module 'posixpath' (frozen)&gt;.exists
E    +      where &lt;module 'posixpath' (frozen)&gt; = os.path</failure></testcase><testcase classname="tests.test_bl005_plan_execution_onboarding.TestBL005PlanExecutionOnboarding" name="test_will_zhang_onboarding_with_retry_success" time="73.114"><failure message="AssertionError: Expected plan done, got error&#10;assert 'error' == 'done'&#10;  - done&#10;  + error">tests/test_bl005_plan_execution_onboarding.py:794: in test_will_zhang_onboarding_with_retry_success
    assert plan_final_status == "done", f"Expected plan done, got {plan_final_status}"
E   AssertionError: Expected plan done, got error
E   assert 'error' == 'done'
E     - done
E     + error</failure></testcase><testcase classname="tests.test_bl005_plan_execution_onboarding.TestBL005PlanExecutionOnboarding" name="test_will_zhang_onboarding_with_multiple_retries_and_resume" time="73.118"><failure message="AssertionError: Expected plan done after resume, got error&#10;assert 'error' == 'done'&#10;  - done&#10;  + error">tests/test_bl005_plan_execution_onboarding.py:1009: in test_will_zhang_onboarding_with_multiple_retries_and_resume
    assert final_status_after_resume == "done", f"Expected plan done after resume, got {final_status_after_resume}"
E   AssertionError: Expected plan done after resume, got error
E   assert 'error' == 'done'
E     - done
E     + error</failure></testcase></testsuite></testsuites>